{"remainingRequest":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\jhee_\\Desktop\\vue3\\src\\components\\numberFormat.vue?vue&type=style&index=0&id=3af736a0&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\src\\components\\numberFormat.vue","mtime":1637716439000},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmlucHV0IHtkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDsgd2lkdGg6IDIwMHB4OyBtYXJnaW4tcmlnaHQ6IDVweDsgdGV4dC1hbGlnbjogcmlnaHQ7fQo="},{"version":3,"sources":["C:\\Users\\jhee_\\Desktop\\vue3\\src\\components\\numberFormat.vue"],"names":[],"mappings":";AAmEA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Users/jhee_/Desktop/vue3/src/components/numberFormat.vue","sourceRoot":"","sourcesContent":["<template>\n    <input type=\"text\" class=\"form-control\" :value=\"numFormat\" @input=\"updateValue\" @blur=\"valueCheck\" @focus=\"valueCheck\" />\n</template>\n\n<script setup>\nimport { defineProps, defineEmits, getCurrentInstance } from 'vue'\n\nconst app = getCurrentInstance()\nconst props = defineProps({\n    num: {\n        type: Number,\n        required: true,\n    },\n    numFormat: {\n        type: String,\n        default: '0'\n    },\n    name: String,\n})\n\nfunction updateValue(evt) {\n    app.emit('update:numFormat', format(evt.target.value))\n\n    let num = parseInt(evt.target.value.replace(/,/ig, ''))\n\n    if (isNaN(num)) {\n        num = 0\n    }\n\n    app.emit('update:num', num)\n}\n\nconst valueCheck = (evt) => {\n    if (evt.type == 'focus') {\n        if (props.numFormat == '0') {\n            app.emit('update:numFormat', '')\n        }\n    } else if (evt.type == 'blur') {\n        if (props.numFormat == '') {\n            app.emit('update:numFormat', '0')\n        }\n    }\n}\n\nconst format = (v) => {\n    if (v !== '') {\n        let minus = parseInt(v) >= 0 ? false : true\n        let find = /(\\d+)(\\d{3})/\n        let spNum = v.toString().split('.')\n        let num = parseInt(spNum[0].replace(/[^0-9]/g, '')).toString()\n\n        while (find.test(num)) {\n            num = num.replace(find, '$1' + ',' + '$2')\n        }\n\n        if (minus) {\n            num = '-' + num\n        }\n\n        return num\n    }\n\n    return ''\n}\n</script>\n\n<style scoped>\ninput {display: inline-block !important; width: 200px; margin-right: 5px; text-align: right;}\n</style>"]}]}