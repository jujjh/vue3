{"remainingRequest":"D:\\00_김주희\\00_개인스터디\\vue3\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\00_김주희\\00_개인스터디\\vue3\\src\\views\\part2\\variables.vue?vue&type=style&index=0&id=5752175d&lang=css","dependencies":[{"path":"D:\\00_김주희\\00_개인스터디\\vue3\\src\\views\\part2\\variables.vue","mtime":1639010242475},{"path":"D:\\00_김주희\\00_개인스터디\\vue3\\node_modules\\css-loader\\dist\\cjs.js","mtime":1639010181170},{"path":"D:\\00_김주희\\00_개인스터디\\vue3\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1639096350799},{"path":"D:\\00_김주희\\00_개인스터디\\vue3\\node_modules\\postcss-loader\\src\\index.js","mtime":1639010216011},{"path":"D:\\00_김주희\\00_개인스터디\\vue3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639010176117},{"path":"D:\\00_김주희\\00_개인스터디\\vue3\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1639096350789}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpidXR0b24ge21hcmdpbi1yaWdodDogMTBweDsgY29sb3I6ICMwMDA7fQ0K"},{"version":3,"sources":["D:\\00_김주희\\00_개인스터디\\vue3\\src\\views\\part2\\variables.vue"],"names":[],"mappings":";AAwJA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC","file":"D:/00_김주희/00_개인스터디/vue3/src/views/part2/variables.vue","sourceRoot":"","sourcesContent":["<template>\r\n    <h1>반응형 변수 & Store(VUEX 4)</h1>\r\n    <p>apple: {{apple}}</p>\r\n    <p>ball: {{ball}}</p>\r\n    <p>coffee: {{coffee}}</p>\r\n    <p>compued: {{changed}}</p>\r\n    <p>lucky: {{lucky}}</p>\r\n\r\n    <p>\r\n        <a ref=\"#\" class=\"btn btn-success\" @click.prevent=\"changeApple\">apple 바꾸기</a>&nbsp;\r\n        <a ref=\"#\" class=\"btn btn-primary\" @click.prevent=\"changeBall\">ball 바꾸기</a>&nbsp;\r\n        <a ref=\"#\" class=\"btn btn-info\" @click.prevent=\"changeCoffee\">coffee 바꾸기</a>&nbsp;\r\n        <a ref=\"#\" class=\"btn btn-secondary\" @click.prevent=\"addArray\">ball 배열 추가</a>&nbsp;\r\n        <a ref=\"#\" class=\"btn btn-warning\" @click.prevent=\"changeState\">state 변경</a>&nbsp;\r\n        <a ref=\"#\" class=\"btn btn-warning\" @click.prevent=\"changeRefs\">state toRefs</a>&nbsp;\r\n        <a ref=\"#\" class=\"btn btn-danger\" @click.prevent=\"showVuex\">VUEX 확인</a>\r\n    </p>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, toRefs, watch, computed } from 'vue'\r\n\r\nlet apple = ref(1)\r\nlet ball = ref([1, 2, 3, 4])\r\nlet coffee = reactive({\r\n    hot: 'is hot',\r\n    ice: 'is ice'\r\n})\r\nlet num = 0\r\nlet ballBefore = ref([])\r\n\r\nwatch(apple, (a, b) => {\r\n    console.log('watch apple', a, b)\r\n})\r\n\r\n// 배열의 ref, reactive 경우 정확히 감시할 배열 또는 인자를 지정해줘야 하고 익명함수로 랩핑 해줘야 한다\r\nwatch([() => ball.value[0], () => ball.value[1]], (a, b) => {\r\n    console.log('watch ball', a, b)\r\n})\r\n\r\n// 배열이 추가 되거나 삭제되는 상태는 감지가 되지 않는다.\r\nwatch(() => ball.value.length, (a, b) => {\r\n    console.log('ball watch before', ballBefore.value)\r\n    console.log('ball watch after', ball.value)\r\n})\r\n\r\nwatch([() => coffee.hot, () => coffee.ice], (a, b) => {\r\n    console.log('watch coffee', a, b)\r\n})\r\n\r\nconst arrayChanged = computed(() => {\r\n    if (ball.value.length) {\r\n        console.log('computed', ball.value)\r\n    }\r\n})\r\n\r\nconst changed = computed(() => {\r\n    let ballValue0 = ball.value[0]\r\n    let ballValue1 = ball.value[1]\r\n    let isHot = coffee.hot\r\n    let len = ball.value.length\r\n\r\n    if (apple.value || ballValue0 > 1 || ballValue1 > 1 || len > 5 || isHot != 'is hot') {\r\n        num++\r\n    }\r\n\r\n    return num\r\n})\r\n\r\nconst changeApple = () => {\r\n    apple.value++\r\n}\r\n\r\nconst changeBall = () => {\r\n    if (ball.value[0] < ball.value[1]) {\r\n        ball.value[0]++\r\n    } else {\r\n        ball.value[1]++\r\n    }\r\n}\r\n\r\nconst changeCoffee = () => {\r\n    if (coffee.hot == 'is hot') {\r\n        coffee.hot = 'is not hot'\r\n    } else {\r\n        coffee.hot = 'is hot'\r\n    }\r\n\r\n    if (coffee.ice == 'is ice') {\r\n        coffee.ice = 'is not ice'\r\n    } else {\r\n        coffee.ice = 'is ice'\r\n    }\r\n}\r\n\r\nconst addArray = () => {\r\n    ballBefore.value = JSON.parse(JSON.stringify(ball.value))\r\n    ball.value.push(0)\r\n}\r\n\r\n/*\r\n    reactive로 선언된 변수를 구조 분해를 하여 사용 할 경우\r\n    각각의 property는 반응형으로 동작하지 않는다.\r\n    각각의 속성을 반응형으로 구조 분해 하여 사용 하고 싶다면\r\n    toRefs로 컨버트 후 구조 분해하여 사용 가능\r\n*/\r\nconst state = reactive({\r\n    foo: 1,\r\n    bar: 2\r\n})\r\n\r\nconst changeState = () => {\r\n    state.foo++\r\n    state.bar++\r\n\r\n    console.log('origin', state.foo, state.bar)\r\n\r\n    let { foo, bar } = state\r\n\r\n    console.log('ref', foo, bar)\r\n\r\n    return toRefs(state)\r\n}\r\n\r\nconst changeRefs = () => {\r\n    const refState = changeState()\r\n    let { foo, bar } = refState\r\n\r\n    foo.value++\r\n    bar.value++\r\n\r\n    console.log('toRefs', foo.value, bar.value)\r\n}\r\n\r\nimport { useStore } from 'vuex'\r\n\r\nconst store = useStore()\r\n\r\nconst showVuex = () => {\r\n    const { state, getters, commit } = store\r\n\r\n    commit('setLucky', 77)\r\n    console.log('getters', getters.getLucky)\r\n    console.log('store.state', store.state.lucky)\r\n    console.log('state', state.lucky)\r\n}\r\n\r\nconst lucky = computed(() => store.state.lucky)\r\n\r\n</script>\r\n\r\n<style>\r\nbutton {margin-right: 10px; color: #000;}\r\n</style>"]}]}