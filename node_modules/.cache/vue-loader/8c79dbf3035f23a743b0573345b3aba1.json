{"remainingRequest":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\jhee_\\Desktop\\vue3\\src\\views\\part2\\variables.vue?vue&type=style&index=0&id=5752175d&lang=css","dependencies":[{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\src\\views\\part2\\variables.vue","mtime":1638514309075},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmJ1dHRvbiB7bWFyZ2luLXJpZ2h0OiAxMHB4OyBjb2xvcjogIzAwMDt9Cg=="},{"version":3,"sources":["C:\\Users\\jhee_\\Desktop\\vue3\\src\\views\\part2\\variables.vue"],"names":[],"mappings":";AAwJA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Users/jhee_/Desktop/vue3/src/views/part2/variables.vue","sourceRoot":"","sourcesContent":["<template>\n    <h1>반응형 변수 & Store(VUEX 4)</h1>\n    <p>apple: {{apple}}</p>\n    <p>ball: {{ball}}</p>\n    <p>coffee: {{coffee}}</p>\n    <p>compued: {{changed}}</p>\n    <p>lucky: {{lucky}}</p>\n\n    <p>\n        <a ref=\"#\" class=\"btn btn-success\" @click.prevent=\"changeApple\">apple 바꾸기</a>&nbsp;\n        <a ref=\"#\" class=\"btn btn-primary\" @click.prevent=\"changeBall\">ball 바꾸기</a>&nbsp;\n        <a ref=\"#\" class=\"btn btn-info\" @click.prevent=\"changeCoffee\">coffee 바꾸기</a>&nbsp;\n        <a ref=\"#\" class=\"btn btn-secondary\" @click.prevent=\"addArray\">ball 배열 추가</a>&nbsp;\n        <a ref=\"#\" class=\"btn btn-warning\" @click.prevent=\"changeState\">state 변경</a>&nbsp;\n        <a ref=\"#\" class=\"btn btn-warning\" @click.prevent=\"changeRefs\">state toRefs</a>&nbsp;\n        <a ref=\"#\" class=\"btn btn-danger\" @click.prevent=\"showVuex\">VUEX 확인</a>\n    </p>\n</template>\n\n<script setup>\nimport { ref, reactive, toRefs, watch, computed } from 'vue'\n\nlet apple = ref(1)\nlet ball = ref([1, 2, 3, 4])\nlet coffee = reactive({\n    hot: 'is hot',\n    ice: 'is ice'\n})\nlet num = 0\nlet ballBefore = ref([])\n\nwatch(apple, (a, b) => {\n    console.log('watch apple', a, b)\n})\n\n// 배열의 ref, reactive 경우 정확히 감시할 배열 또는 인자를 지정해줘야 하고 익명함수로 랩핑 해줘야 한다\nwatch([() => ball.value[0], () => ball.value[1]], (a, b) => {\n    console.log('watch ball', a, b)\n})\n\n// 배열이 추가 되거나 삭제되는 상태는 감지가 되지 않는다.\nwatch(() => ball.value.length, (a, b) => {\n    console.log('ball watch before', ballBefore.value)\n    console.log('ball watch after', ball.value)\n})\n\nwatch([() => coffee.hot, () => coffee.ice], (a, b) => {\n    console.log('watch coffee', a, b)\n})\n\nconst arrayChanged = computed(() => {\n    if (ball.value.length) {\n        console.log('computed', ball.value)\n    }\n})\n\nconst changed = computed(() => {\n    let ballValue0 = ball.value[0]\n    let ballValue1 = ball.value[1]\n    let isHot = coffee.hot\n    let len = ball.value.length\n\n    if (apple.value || ballValue0 > 1 || ballValue1 > 1 || len > 5 || isHot != 'is hot') {\n        num++\n    }\n\n    return num\n})\n\nconst changeApple = () => {\n    apple.value++\n}\n\nconst changeBall = () => {\n    if (ball.value[0] < ball.value[1]) {\n        ball.value[0]++\n    } else {\n        ball.value[1]++\n    }\n}\n\nconst changeCoffee = () => {\n    if (coffee.hot == 'is hot') {\n        coffee.hot = 'is not hot'\n    } else {\n        coffee.hot = 'is hot'\n    }\n\n    if (coffee.ice == 'is ice') {\n        coffee.ice = 'is not ice'\n    } else {\n        coffee.ice = 'is ice'\n    }\n}\n\nconst addArray = () => {\n    ballBefore.value = JSON.parse(JSON.stringify(ball.value))\n    ball.value.push(0)\n}\n\n/*\n    reactive로 선언된 변수를 구조 분해를 하여 사용 할 경우\n    각각의 property는 반응형으로 동작하지 않는다.\n    각각의 속성을 반응형으로 구조 분해 하여 사용 하고 싶다면\n    toRefs로 컨버트 후 구조 분해하여 사용 가능\n*/\nconst state = reactive({\n    foo: 1,\n    bar: 2\n})\n\nconst changeState = () => {\n    state.foo++\n    state.bar++\n\n    console.log('origin', state.foo, state.bar)\n\n    let { foo, bar } = state\n\n    console.log('ref', foo, bar)\n\n    return toRefs(state)\n}\n\nconst changeRefs = () => {\n    const refState = changeState()\n    let { foo, bar } = refState\n\n    foo.value++\n    bar.value++\n\n    console.log('toRefs', foo.value, bar.value)\n}\n\nimport { useStore } from 'vuex'\n\nconst store = useStore()\n\nconst showVuex = () => {\n    const { state, getters, commit } = store\n\n    commit('setLucky', 77)\n    console.log('getters', getters.getLucky)\n    console.log('store.state', store.state.lucky)\n    console.log('state', state.lucky)\n}\n\nconst lucky = computed(() => store.state.lucky)\n\n</script>\n\n<style>\nbutton {margin-right: 10px; color: #000;}\n</style>"]}]}