{"remainingRequest":"D:\\vue3\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\vue3\\src\\components\\numberFormat.vue?vue&type=template&id=3af736a0&scoped=true","dependencies":[{"path":"D:\\vue3\\src\\components\\numberFormat.vue","mtime":1638881583967},{"path":"D:\\vue3\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":499162500000},{"path":"D:\\vue3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue3\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIDp2YWx1ZT0ibnVtRm9ybWF0IiBAaW5wdXQ9InVwZGF0ZVZhbHVlIiBAYmx1cj0idmFsdWVDaGVjayIgQGZvY3VzPSJ2YWx1ZUNoZWNrIiAvPg0K"},{"version":3,"sources":["D:\\vue3\\src\\components\\numberFormat.vue"],"names":[],"mappingsfile":"D:/vue3/src/components/numberFormat.vue","sourceRoot":"","sourcesContent":["<template>\r\n    <input type=\"text\" class=\"form-control\" :value=\"numFormat\" @input=\"updateValue\" @blur=\"valueCheck\" @focus=\"valueCheck\" />\r\n</template>\r\n\r\n<script setup>\r\nimport { defineProps, defineEmits, getCurrentInstance } from 'vue'\r\n\r\nconst app = getCurrentInstance()\r\nconst props = defineProps({\r\n    num: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    numFormat: {\r\n        type: String,\r\n        default: '0'\r\n    },\r\n    name: String,\r\n})\r\n\r\nfunction updateValue(evt) {\r\n    app.emit('update:numFormat', format(evt.target.value))\r\n\r\n    let num = parseInt(evt.target.value.replace(/,/ig, ''))\r\n\r\n    if (isNaN(num)) {\r\n        num = 0\r\n    }\r\n\r\n    app.emit('update:num', num)\r\n}\r\n\r\nconst valueCheck = (evt) => {\r\n    if (evt.type == 'focus') {\r\n        if (props.numFormat == '0') {\r\n            app.emit('update:numFormat', '')\r\n        }\r\n    } else if (evt.type == 'blur') {\r\n        if (props.numFormat == '') {\r\n            app.emit('update:numFormat', '0')\r\n        }\r\n    }\r\n}\r\n\r\nconst format = (v) => {\r\n    if (v !== '') {\r\n        let minus = parseInt(v) >= 0 ? false : true\r\n        let find = /(\\d+)(\\d{3})/\r\n        let spNum = v.toString().split('.')\r\n        let num = parseInt(spNum[0].replace(/[^0-9]/g, '')).toString()\r\n\r\n        while (find.test(num)) {\r\n            num = num.replace(find, '$1' + ',' + '$2')\r\n        }\r\n\r\n        if (minus) {\r\n            num = '-' + num\r\n        }\r\n\r\n        return num\r\n    }\r\n\r\n    return ''\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ninput {display: inline-block !important; width: 200px; margin-right: 5px; text-align: right;}\r\n</style>"]}]}