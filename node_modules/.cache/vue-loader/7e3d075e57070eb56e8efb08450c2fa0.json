{"remainingRequest":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\jhee_\\Desktop\\vue3\\src\\components\\validateForm.vue?vue&type=template&id=6903620a","dependencies":[{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\src\\components\\validateForm.vue","mtime":1637818956000},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\jhee_\\Desktop\\vue3\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8Zm9ybSByZWY9ImZybSIgQHN1Ym1pdC5wcmV2ZW50PgogICAgICAgIDxzbG90Pjwvc2xvdD4KICAgIDwvZm9ybT4K"},{"version":3,"sources":["C:\\Users\\jhee_\\Desktop\\vue3\\src\\components\\validateForm.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Users/jhee_/Desktop/vue3/src/components/validateForm.vue","sourceRoot":"","sourcesContent":["<template>\n    <form ref=\"frm\" @submit.prevent>\n        <slot></slot>\n    </form>\n</template>\n\n<script setup>\nimport { useSlots, defineExpose, getCurrentInstance } from 'vue'\n\nconst ins = getCurrentInstance()\nconst slots = useSlots()\n\nlet checkState = true\nlet firstElm = null\n\nconst validate = () => {\n    // const slot = slots.default()\n\n    // console.log(slot[0].children[0].type)\n    // console.log(ins)\n\n    checkState = true\n    firstElm = null\n\n    traverse(ins.subTree)\n\n    // 검수에 통과하지 못한 가장 첫번째 폼에 포커스\n    if (firstElm !== null) {\n        try {\n            firstElm.scrollIntoView({behavior: 'smooth', block: 'center'})\n        } catch(e) {}\n    }\n\n    return checkState\n}\n\nconst resetForm = () => {\n    traverse(ins.subTree, 'reset')\n}\n\nconst traverse = (el, flag = 'dom') => {\n    if (Array.isArray(el.children)) {\n        const len = el.children.length\n\n        if (len > 0) {\n            const vueNodes = el.children\n\n            // vue node 전체(chilren)을 탐색 하여 chidren이 또 있는 경우 재귀한다.\n            for (let i = 0; i < len; i++) {\n                if (vueNodes[i].component !== null) {\n                    traverse(vueNodes[i].component.subTree, flag)\n                }\n\n                if (!!vueNodes[i].children) {\n                    if (vueNodes[i].children.length > 0) {\n                        traverse(vueNodes[i], flag)\n                    }\n                } else {\n                    componentCheck(vueNodes[i], flag)\n                }\n            }\n        }\n    } else if (!!el.component) {\n        if (el.component.subTree !== undefined) {\n            traverse(el.component.subTree, flag)\n        }\n    }\n}\n\nconst componentCheck = async (el, flag) => {\n    const vueDom = [\n        'inputField', 'numberFormat', 'selectBox', 'switchButton', 'checkButton',\n        'orgSelect', 'datePicker', 'findPostCode', 'attachFile', 'slotsTable'\n    ]\n\n    // 컴포넌트인지 체크 후 필요한 처리를 한다.\n    if (typeof el.type == 'object') {\n        let file = el.type.__file.split('/')\n        let tagName = file[file.length - 1].split('.')[0]\n\n        if (vueDom.indexOf(tagName) > -1) {\n            if (flag == 'reset') {\n                el.component.exposed.resetForm()\n            } else {\n                if (!el.component.exposed.check() && checkState) {\n                    checkState = false\n\n                    // 가장 처음 검수에 통과 하지 못한 폼 저장 (라인 포커스)\n                    if (firstElm === null) {\n                        firstElm = el.$el\n                    }\n                }\n            }\n        }\n    }\n}\n\ndefineExpose({\n    resetForm,\n    validate\n})\n</script>"]}]}